//peterkydd
//21/08/13
//timing data on quicksort algorithms

Size: describes the size of the data set
Standard/Median/Random: describes the pivot type employed for that particular algorithm
Average: the average value of the collected times. (to two decimal places. I felt that this was probably the maximum amount of precision that could accurately be derived from the timing data)


//NORMAL DATA 
(ie, in numerical order; 1, 2, 3, ...)
      	SIZE:		 				
   	   5x10^4	1x10^5	5x10^5	1x10^6	5x10^6	1x10^7	5x10^7

STANDARD	0.02	   0.048	   0.752	   3.152	   39.75	   96.742	829.259
(-pn)	   0.02	   0.044	   0.828	   2.828	   39.69	   92.83	   830.68
	      0.02	   0.048	   0.816	   2.832	   40.24	   75.98	   832.23
Average:	0.02	   0.05	   0.08	   2.9	   39.89	   88.52	   830.33

MEDIAN	0.08	   0.012	   0.024	   0.048 	0.168	   0.408	   1.988
(-pm)	   0.012	   0.012 	0.028 	0.044	   0.18	   0.402 	1.928
	      0.08  	0.024	   0.024 	0.042	   0.188	   0.39  	2.05
Average:	0.09	   0.02  	0.03	   0.05	   0.18	   0.4	   2
   
RANDOM	0.016	   0.032	   0.12	   0.236	   1.12	   2.13	   10.881
(-pr)	   0.012	   0.032 	0.122	   0.22	   1.196 	2.19	   11.33
	      0.016	   0.024	   0.12	   0.224	   1.17	   2.188	   11.1
Average:	0.01	   0.03	   0.12	   0.22	   1.1	   2.2	   11.3

// On the standard data set, the result was fairly predictable; the performance of the standard sort was the typical worst case, with a time complexity of approximately n^2 . I was surprised by the relatively poor performance of the naive pivot quick sort - and doubly surprised by the effectiveness of the randomised pivot. 

As expected, the top performer was the median of three pivot implementation.  


//REVERSED DATA
(ie, in reverse numerical order; 100, 99, 98...)
         SIZE:
      	5x10^4	1x10^5	5x10^5	1x10^6	5x10^6	1x10^7	5x10^7
							
STANDARD	0.02	   0.044 	0.876 	3.418	   49.8	   108.292	865.12
(-pn)	   0.024	   0.038	   0.868	   3.43	   49.583	109.811	840.55
	      0.02	   0.044	   0.876	   3.376 	49.2	   110.735	870.89
Average:	0.02	   0.04	   0.87	   3.41	   49.6	   109.8	   858.33

MEDIAN	0.012	   0.02	   0.028	   0.044	   0.21	   0.408	   1.9
(-pm)	   0.012	   0.016	   0.032	   0.044	   0.196	   0.396	   2.036
	      0.012	   0.008	   0.028	   0.048	   0.208	   0.388	   1.95
Average:	0.12	   0.16	   0.3	   0.46	   0.2	   0.39	   1.95

RANDOM	0.032	   0.032	   0.116	   0.21	   1.08	   1.176	   11.051
(-pr)	   0.04	   0.032	   0.104	   0.228	   1.114	   2.14	   11.483
	      0.036	   0.036	   0.116	   0.232	   1.31	   2.18	   10.825
Average:	0.03	   0.03	   0.11	   0.22	   1.11	   2.1	   11.2

//performance of the reversed data set was similar to that of the standard data set. Performance was slightly worse but within margins of error. once again, the median of three sort greatly exceeded the other two sort implementations.  


//RANDOM DATA
(ie, 1 9 73 2 4 89 1002 3...)
         SIZE:
      	5x10^4	1x10^5	5x10^5	1x10^6	5x10^6	1x10^7	5x10^7
							
STANDARD	0.012	   0.064	   0.284	   0.574	   3.342 	6.11  	30.85
(-pn) 	0.012	   0.054	   0.278	   0.59	   3.52  	5.92  	31.77
	      0.012	   0.061	   0.274	   0.568	   3.52  	5.92  	31.68
Average:	0.012	   0.06	   0.27	   0.58	   3.46  	5.98  	31.2

MEDIAN	0.08	   0.012	   0.036	   0.068	   0.302 	0.616 	3.66
(-pm)	   0.08	   0.012	   0.032	   0.056	   0.292 	0.612 	2.844
	      0.08	   0.012	   0.024	   0.056 	0.34  	0.592 	2.922
Average:	0.08	   0.012	   0.03	   0.06  	0.01  	0.61  	3.14

RANDOM	0.02  	0.028	   0.128 	0.248 	1.216 	2.32  	12.209
(-pr)	   0.016 	0.032	   0.124	   0.248 	1.204 	2.48  	13.137
	      0.024	   0.032	   0.128 	0.268 	1.182 	2.44  	11.988
Average:	0.01	   0.03	   0.12	   0.24	   1.2   	2.4   	12.5

//The standard quicksort performed much better on the random data than I thad previously. Once again, it did not beat the median or the random pivot implementations, however, it did improve on its own performance in the standard/reversed data categories by an order of magnitude - a very commendable improvement. 

once again however, the best performance was given by the median of three implementation, as expected. This is not a surprising outcome, as the median quicksort has the highest chance of choosing the most appropriate pivot value and hence improving its sorting performance. 

I would like to remark on how surpised I was by the performance of the randomised pivot. You would expect that there is a good chance that the pivot, selected randmly could possibly be a value that is sub-optimal for the performace of the algorithm. yet, on each run, it performed consistently and well.  


NOTE: Any data below 5x10^5 was statistically spurious - yielding values that were less than the margin of error. As such, I decided that I would not bother testing those values on the random data run. Typically, the values would range from 0.000 to 0.012. This can be attributed to the overhead of running the program.
It is not what you would consider statistically important information about the time complexity of the program being run and therefore can be safely ignored. 


